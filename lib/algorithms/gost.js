/**
 * Javascript jCastle Mcrypt Module - GOST 28147-89(34.11-94)
 * 
 * @author Jacob Lee
 *
 * Copyright (C) 2015-2022 Jacob Lee.
 */


var jCastle = require('../jCastle');
require('../util');

jCastle.algorithm.gost = class
{
	/**
	 * creates the algorithm instance.
	 * 
	 * @param {string} algo_name algorithm name
	 * @constructor
	 */
    constructor(algo_name, options = {})
    {
        this.algoName = algo_name;
        this.masterKey = null;
        this.roundKey = null;
        this.sboxType = 'default';
        this.sbox = null;

        if ('sbox' in options) {
            this.sboxType = options.sbox;
        }
    }

	/**
	 * validate the key size.
	 * 
	 * @public
	 * @param {buffer} key 
	 * @returns true if the key size is valid.
	 */
	isValidKeySize(key)
	{
		if (jCastle._algorithmInfo[this.algoName].min_key_size == jCastle._algorithmInfo[this.algoName].max_key_size) {
			if (key.length != jCastle._algorithmInfo[this.algoName].key_size) {
				return false;
			}
		} else {
			if (key.length > jCastle._algorithmInfo[this.algoName].max_key_size) {
				return false;
			}
			if (key.length < jCastle._algorithmInfo[this.algoName].min_key_size) {
				return false;
			}
			if (typeof jCastle._algorithmInfo[this.algoName].key_sizes != 'undefined' &&
                !jCastle._algorithmInfo[this.algoName].key_sizes.includes(key.length)
			) {
				return false;			
			}
		}
		return true;
	}

	/**
	 * resets internal variables except algoName.
	 * 
	 * @public
	 * @returns this class instance.
	 */
	reset()
	{
		this.masterKey = null;
		this.whitenKey = null;
		this.roundKeys = null;
		this.rounds = 8;
		return this;
	}

	/**
	 * get the key.
	 * 
	 * @public
	 * @returns the masterKey.
	 */
    getKey()
	{
		return this.masterKey;
	}

	/**
	 * get the block size.
	 * 
	 * @public
	 * @returns the block size.
	 */
	getBlockSize()
	{
		return jCastle._algorithmInfo[this.algoName].block_size;
	}

	/**
	 * makes round key for encryption/decryption.
	 *
	 * @public
	 * @param {buffer} key encryption/decryption key.
	 * @param {boolean} isEncryption if encryption then true, otherwise false.
	 */
	keySchedule(key, isEncryption)
	{
		this.masterKey = Buffer.from(key, 'latin1');
		
		if (!this.sbox) this.setSbox('default');

		this.expandKey(this.masterKey);

		return this;
	}

	/**
	 * encrypts a block.
	 * 
	 * @public
	 * @param {buffer} input input data to be encrypted.
	 * @returns encrypted block in buffer.
	 */
	encryptBlock(input)
	{
		return this.cryptBlock(true, input);
	}

	/**
	 * decrypts a block.
	 * 
	 * @public
	 * @param {buffer} input input data to be decrypted.
	 * @returns the decrypted block in buffer.
	 */
	decryptBlock(input)
	{
		return this.cryptBlock(false, input);
	}

	/**
	 * Calculate the necessary round keys.
	 * The number of calculations depends on key size and block size.
	 * 
	 * @private
	 * @param {buffer} key key for encryption/decryption.
	 * @param {boolean} isEncryption true if it is encryption, otherwise false.
	 */
	expandKey(key)
	{
		this.roundKey = new Array(8);

		for (var i = 0; i < this.roundKey.length; i++) {
			this.roundKey[i] = key.readInt32LE(i * 4);
		}
	}


	step(x)
	{
		var result;

	//	result = this.sbox[7][(x >>> 28) & 15] << 28 | this.sbox[6][(x >>> 24) & 15] << 24 |
	//			this.sbox[5][(x >>> 20) & 15] << 20 | this.sbox[4][(x >>> 16) & 15] << 16 |
	//			this.sbox[3][(x >>> 12) & 15] << 12 | this.sbox[2][(x >>> 8) & 15] << 8 |
	//			this.sbox[1][(x >>> 4) & 15] << 4 | this.sbox[0][x & 15];
		for (var i = 7; i >= 0; i--) {
			result |= this.sbox[i][(x >>> (i * 4)) & 15] << (i * 4);
		}
		// Rotate left 11 bits
		return jCastle.util.rotl32(result, 11);
	}

	/**
	 * crypt the block sized data.
	 * 
	 * @public
	 * @param {boolean} direction true if it is encryption, otherwise false.
	 * @param {buffer} input input data to be crypted.
	 * @returns the crypted data in buffer.
	 */
	cryptBlock(direction, input)
	{
		var n1, n2;

		n1 = input.readInt32LE(0);
		n2 = input.readInt32LE(4);

		var CM1,CM2;

		if (direction) {
			for (var i = 0; i < 3; i++) {
				for (var j = 0; j < 8; j++) {
					CM1 = n1 + this.roundKey[j];
					CM2 = this.step(CM1) ^ n2;
					n2 = n1;  n1 = CM2;
				}
			}

			for (var j = 7; j >=0; j--) {
				CM1 = n1 + this.roundKey[j];
				CM2 = this.step(CM1) ^ n2;
				if (j == 0) {
					n2 = CM2;
				} else {
					n2 = n1; n1 = CM2;
				}
			}
		} else {
			for (var j = 0; j < 8; j++) {
				CM1 = n1 + this.roundKey[j];
				CM2 = this.step(CM1) ^ n2;
				n2 = n1; n1 = CM2;
			}

			for (var i = 0; i < 3; i++) {
				for (var j = 7; j >= 0; j--) {
					CM1 = n1 + this.roundKey[j];
					CM2 = this.step(CM1) ^ n2;
					if (i == 2 && j == 0) {
						n2 = CM2;
					} else {
						n2 = n1;  n1 = CM2;
					}
				}
			}
		}

		var output = Buffer.alloc(input.length);
		output.writeInt32LE(n1, 0, true);
		output.writeInt32LE(n2, 4, true);

		return output;
	}

	setSbox(sbox_type)
	{
		this.sboxType = sbox_type;

		switch (sbox_type) {
			case 'Gost28147_TestParamSet':
			case 'E-TEST': 
			case "1.2.643.2.2.31.0":
				this.sbox = jCastle.algorithm.gost.esbox_test; break;
			case 'Gost28147_CryptoProParamSetA':
			case 'E-A': 
			case "1.2.643.2.2.31.1":
				this.sbox = jCastle.algorithm.gost.esbox_a; break;
			case 'Gost28147_CryptoProParamSetB':
			case 'E-B': 
			case "1.2.643.2.2.31.2":
				this.sbox = jCastle.algorithm.gost.esbox_b; break;
			case 'Gost28147_CryptoProParamSetC':
			case 'E-C': 
			case "1.2.643.2.2.31.3":
				this.sbox = jCastle.algorithm.gost.esbox_c; break;
			case 'Gost28147_CryptoProParamSetD':
			case 'E-D': 
			case "1.2.643.2.2.31.4":
				this.sbox = jCastle.algorithm.gost.esbox_d; break;
			case 'D-TEST': // same with GostR3411_94_TestParamSet
				this.sbox = jCastle.algorithm.gost.dsbox_test; break;
			case 'GostR3411_94_CryptoProParamSet':
			case 'D-A':
			case "1.2.643.2.2.30.1":
				this.sbox = jCastle.algorithm.gost.dsbox_a; break;
			case 'GostR3411_94_TestParamSet':
			case 'default':
			case "1.2.643.2.2.30.0":
				this.sbox = jCastle.algorithm.gost.default_sbox; break;
			default: // empty or wrong
				this.sboxType = 'default';
				this.sbox = jCastle.algorithm.gost.default_sbox; break;
		}

		return this;
	}

	// for calculating MAC
	calculateMac(input)
	{
		var n1, n2;

		n1 = input.readInt32LE(0);
		n2 = input.readInt32LE(4);

		var CM1,CM2;

		for (var i = 0; i < 2; i++) { // 1-16 steps
			for (var j = 0; j < 8; j++) {
				CM1 = n1 + this.roundKey[j];
				CM2 = this.step(CM1) ^ n2;
				n2 = n1;  n1 = CM2;
			}
		}

		var output = Buffer.alloc(input.length);
		output.writeInt32LE(n1, 0);
		output.writeInt32LE(n2, 4);

		return output;
	}
};

/*
 * ---------
 * Constants
 * ---------
 */

/*
// these are the S-boxes given in Applied Cryptography 2nd Ed., p. 333
// This is default S-box!
// GOST 34.11-94.
// GostR3411_94_TestParamSet. see openssl/engines/ccgost/gost89.c
jCastle.algorithm.gost.default_sbox = [
	[0x4,0xA,0x9,0x2,0xD,0x8,0x0,0xE,0x6,0xB,0x1,0xC,0x7,0xF,0x5,0x3],
	[0xE,0xB,0x4,0xC,0x6,0xD,0xF,0xA,0x2,0x3,0x8,0x1,0x0,0x7,0x5,0x9],
	[0x5,0x8,0x1,0xD,0xA,0x3,0x4,0x2,0xE,0xF,0xC,0x7,0x6,0x0,0x9,0xB],
	[0x7,0xD,0xA,0x1,0x0,0x8,0x9,0xF,0xE,0x4,0x6,0xC,0xB,0x2,0x5,0x3],
	[0x6,0xC,0x7,0x1,0x5,0xF,0xD,0x8,0x4,0xA,0x9,0xE,0x0,0x3,0xB,0x2],
	[0x4,0xB,0xA,0x0,0x7,0x2,0x1,0xD,0x3,0x6,0x8,0x5,0x9,0xC,0xF,0xE],
	[0xD,0xB,0x4,0x1,0x3,0xF,0x5,0x9,0x0,0xA,0xE,0x7,0x6,0x8,0x2,0xC],
	[0x1,0xF,0xD,0x0,0x5,0x7,0xA,0x4,0x9,0x2,0x3,0xE,0x6,0xB,0x8,0xC]
];
*/
    
/*
 * class content S-box parameters for encrypting
 * getting from, see: http://www.ietf.org/internet-drafts/draft-popov-cryptopro-cpalgs-01.txt
 *                    http://www.ietf.org/internet-drafts/draft-popov-cryptopro-cpalgs-02.txt
 */
// Gost28147_TestParamSet
// Test paramset from GOST 28147
// 1.2.643.2.2.31.0
jCastle.algorithm.gost.esbox_test = [
	[0x4,0x2,0xF,0x5,0x9,0x1,0x0,0x8,0xE,0x3,0xB,0xC,0xD,0x7,0xA,0x6],
	[0xC,0x9,0xF,0xE,0x8,0x1,0x3,0xA,0x2,0x7,0x4,0xD,0x6,0x0,0xB,0x5],
	[0xD,0x8,0xE,0xC,0x7,0x3,0x9,0xA,0x1,0x5,0x2,0x4,0x6,0xF,0x0,0xB],
	[0xE,0x9,0xB,0x2,0x5,0xF,0x7,0x1,0x0,0xD,0xC,0x6,0xA,0x4,0x3,0x8],
	[0x3,0xE,0x5,0x9,0x6,0x8,0x0,0xD,0xA,0xB,0x7,0xC,0x2,0x1,0xF,0x4],
	[0x8,0xF,0x6,0xB,0x1,0x9,0xC,0x5,0xD,0x3,0x7,0xA,0x0,0xE,0x2,0x4],
	[0x9,0xB,0xC,0x0,0x3,0x6,0x7,0x5,0x4,0x8,0xE,0xF,0x1,0xA,0x2,0xD],
	[0xC,0x6,0x5,0x2,0xB,0x0,0x9,0xD,0x3,0xE,0x7,0xA,0xF,0x4,0x1,0x8]
];

// Gost28147_CryptoProParamSetA
// 1.2.643.2.2.31.1
jCastle.algorithm.gost.esbox_a = [
	[0x9,0x6,0x3,0x2,0x8,0xB,0x1,0x7,0xA,0x4,0xE,0xF,0xC,0x0,0xD,0x5],
	[0x3,0x7,0xE,0x9,0x8,0xA,0xF,0x0,0x5,0x2,0x6,0xC,0xB,0x4,0xD,0x1],
	[0xE,0x4,0x6,0x2,0xB,0x3,0xD,0x8,0xC,0xF,0x5,0xA,0x0,0x7,0x1,0x9],
	[0xE,0x7,0xA,0xC,0xD,0x1,0x3,0x9,0x0,0x2,0xB,0x4,0xF,0x8,0x5,0x6],
	[0xB,0x5,0x1,0x9,0x8,0xD,0xF,0x0,0xE,0x4,0x2,0x3,0xC,0x7,0xA,0x6],
	[0x3,0xA,0xD,0xC,0x1,0x2,0x0,0xB,0x7,0x5,0x9,0x4,0x8,0xF,0xE,0x6],
	[0x1,0xD,0x2,0x9,0x7,0xA,0x6,0x0,0x8,0xC,0x4,0x5,0xF,0x3,0xB,0xE],
	[0xB,0xA,0xF,0x5,0x0,0xC,0xE,0x8,0x6,0x2,0x3,0x9,0x1,0x7,0xD,0x4]
];

// Gost28147_CryptoProParamSetB
// 1.2.643.2.2.31.2
jCastle.algorithm.gost.esbox_b = [
	[0x8,0x4,0xB,0x1,0x3,0x5,0x0,0x9,0x2,0xE,0xA,0xC,0xD,0x6,0x7,0xF],
	[0x0,0x1,0x2,0xA,0x4,0xD,0x5,0xC,0x9,0x7,0x3,0xF,0xB,0x8,0x6,0xE],
	[0xE,0xC,0x0,0xA,0x9,0x2,0xD,0xB,0x7,0x5,0x8,0xF,0x3,0x6,0x1,0x4],
	[0x7,0x5,0x0,0xD,0xB,0x6,0x1,0x2,0x3,0xA,0xC,0xF,0x4,0xE,0x9,0x8],
	[0x2,0x7,0xC,0xF,0x9,0x5,0xA,0xB,0x1,0x4,0x0,0xD,0x6,0x8,0xE,0x3],
	[0x8,0x3,0x2,0x6,0x4,0xD,0xE,0xB,0xC,0x1,0x7,0xF,0xA,0x0,0x9,0x5],
	[0x5,0x2,0xA,0xB,0x9,0x1,0xC,0x3,0x7,0x4,0xD,0x0,0x6,0xF,0x8,0xE],
	[0x0,0x4,0xB,0xE,0x8,0x3,0x7,0x1,0xA,0x2,0x9,0x6,0xF,0xD,0x5,0xC]
];

// Gost28147_CryptoProParamSetC
// 1.2.643.2.2.31.3
jCastle.algorithm.gost.esbox_c = [
	[0x1,0xB,0xC,0x2,0x9,0xD,0x0,0xF,0x4,0x5,0x8,0xE,0xA,0x7,0x6,0x3],
	[0x0,0x1,0x7,0xD,0xB,0x4,0x5,0x2,0x8,0xE,0xF,0xC,0x9,0xA,0x6,0x3],
	[0x8,0x2,0x5,0x0,0x4,0x9,0xF,0xA,0x3,0x7,0xC,0xD,0x6,0xE,0x1,0xB],
	[0x3,0x6,0x0,0x1,0x5,0xD,0xA,0x8,0xB,0x2,0x9,0x7,0xE,0xF,0xC,0x4],
	[0x8,0xD,0xB,0x0,0x4,0x5,0x1,0x2,0x9,0x3,0xC,0xE,0x6,0xF,0xA,0x7],
	[0xC,0x9,0xB,0x1,0x8,0xE,0x2,0x4,0x7,0x3,0x6,0x5,0xA,0x0,0xF,0xD],
	[0xA,0x9,0x6,0x8,0xD,0xE,0x2,0x0,0xF,0x3,0x5,0xB,0x4,0x1,0xC,0x7],
	[0x7,0x4,0x0,0x5,0xA,0x2,0xF,0xE,0xC,0x6,0x1,0xB,0xD,0x9,0x3,0x8]
];

// Gost28147_CryptoProParamSetD
// 1.2.643.2.2.31.4
jCastle.algorithm.gost.esbox_d = [
	[0xF,0xC,0x2,0xA,0x6,0x4,0x5,0x0,0x7,0x9,0xE,0xD,0x1,0xB,0x8,0x3],
	[0xB,0x6,0x3,0x4,0xC,0xF,0xE,0x2,0x7,0xD,0x8,0x0,0x5,0xA,0x9,0x1],
	[0x1,0xC,0xB,0x0,0xF,0xE,0x6,0x5,0xA,0xD,0x4,0x8,0x9,0x3,0x7,0x2],
	[0x1,0x5,0xE,0xC,0xA,0x7,0x0,0xD,0x6,0x2,0xB,0x4,0x9,0x3,0xF,0x8],
	[0x0,0xC,0x8,0x9,0xD,0x2,0xA,0xB,0x7,0x3,0x6,0x5,0x4,0xE,0xF,0x1],
	[0x8,0x0,0xF,0x3,0x2,0x5,0xE,0xB,0x1,0xA,0x4,0x7,0xC,0x9,0xD,0x6],
	[0x3,0x0,0x6,0xF,0x1,0xE,0x9,0x2,0xD,0x8,0xC,0x4,0xB,0xA,0x5,0x7],
	[0x1,0xA,0x6,0x8,0xF,0xB,0x0,0x4,0xC,0x3,0x5,0x9,0x7,0xD,0x2,0xE]
];

// these are the S-boxes given in Applied Cryptography 2nd Ed., p. 333
// This is default S-box!
// GOST 34.11-94.
// GostR3411_94_TestParamSet. see openssl/engines/ccgost/gost89.c
jCastle.algorithm.gost.default_sbox = 

    
//S-box for digest. this is the same with default_sbox
// GostR3411_94_TestParamSet
// Substitution blocks from test examples for GOST R 34.11-94
// 1.2.643.2.2.30.0
jCastle.algorithm.gost.dsbox_test = [
	[0x4,0xA,0x9,0x2,0xD,0x8,0x0,0xE,0x6,0xB,0x1,0xC,0x7,0xF,0x5,0x3],
	[0xE,0xB,0x4,0xC,0x6,0xD,0xF,0xA,0x2,0x3,0x8,0x1,0x0,0x7,0x5,0x9],
	[0x5,0x8,0x1,0xD,0xA,0x3,0x4,0x2,0xE,0xF,0xC,0x7,0x6,0x0,0x9,0xB],
	[0x7,0xD,0xA,0x1,0x0,0x8,0x9,0xF,0xE,0x4,0x6,0xC,0xB,0x2,0x5,0x3],
	[0x6,0xC,0x7,0x1,0x5,0xF,0xD,0x8,0x4,0xA,0x9,0xE,0x0,0x3,0xB,0x2],
	[0x4,0xB,0xA,0x0,0x7,0x2,0x1,0xD,0x3,0x6,0x8,0x5,0x9,0xC,0xF,0xE],
	[0xD,0xB,0x4,0x1,0x3,0xF,0x5,0x9,0x0,0xA,0xE,0x7,0x6,0x8,0x2,0xC],
	[0x1,0xF,0xD,0x0,0x5,0x7,0xA,0x4,0x9,0x2,0x3,0xE,0x6,0xB,0x8,0xC]
];

// GostR3411_94_CryptoProParamSet
// ubstitution blocks for hash function 1.2.643.2.9.1.6.1
// 1.2.643.2.2.30.1
jCastle.algorithm.gost.dsbox_a = [
	[0xA,0x4,0x5,0x6,0x8,0x1,0x3,0x7,0xD,0xC,0xE,0x0,0x9,0x2,0xB,0xF],
	[0x5,0xF,0x4,0x0,0x2,0xD,0xB,0x9,0x1,0x7,0x6,0x3,0xC,0xE,0xA,0x8],
	[0x7,0xF,0xC,0xE,0x9,0x4,0x1,0x0,0x3,0xB,0x5,0x2,0x6,0xA,0x8,0xD],
	[0x4,0xA,0x7,0xC,0x0,0xF,0x2,0x8,0xE,0x1,0x6,0x5,0xD,0xB,0x9,0x3],
	[0x7,0x6,0x4,0xB,0x9,0xC,0x2,0xA,0x1,0x8,0x0,0xE,0xF,0xD,0x3,0x5],
	[0x7,0x6,0x2,0x4,0xD,0x9,0xF,0x0,0xA,0x1,0x5,0xB,0x8,0xE,0xC,0x3],
	[0xD,0xE,0x4,0x1,0x7,0x0,0x5,0xA,0x3,0xC,0x8,0xF,0x6,0x2,0x9,0xB],
	[0x1,0x3,0xA,0x9,0x5,0xB,0x4,0xF,0x8,0x6,0x7,0xE,0xD,0x0,0x2,0xC]
];


jCastle._algorithmInfo['gost28147'] =
jCastle._algorithmInfo['gost'] = {
	algorithm_type: 'crypt',
	block_size: 8,
	key_size: 32,
	min_key_size: 32,
	max_key_size: 32,
	padding: 'zeros',
	object_name: 'gost',
	oid: "1.2.643.2.2.21"
};

module.exports = jCastle.algorithm.gost;