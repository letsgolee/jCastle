
const jCastle = require('../lib/index');
const QUnit = require('qunit');

QUnit.module('ASN1');
QUnit.test('Parsing test', assert => {
    // envelopedData
    const code_hex = 
    `30820a4230820a3e06092a864886f70d010703a0820a2f30820a2b0201023182018830820184020100303d303831363009060355040613025553302906035504031e220050006500630075006c006900610072002000560065006e00740075007200650073020101303c06092a864886f70d010107302fa00f300d06096086480165030402030500a11c301a06092a864886f70d010108300d0609608648016503040203050004820100d6b3f5916c8c26a2f2604537e94740ca5aca49bb3240e902a8e49548cdf4855f99dfccb238d28125a3cbd47f339923747660e5b27d11526d550a96abb00a9ba40acd7f66fdd34101847c8d9bf023f0e5135ba3c8f42e1c809ea284bebd70751d40c876f3723c6a6b14c091abdba82ce12548547bdedf12059800e96cdb41a2f8f1fcecadd7fdf4a77b4a3b8b1201dd085432bb010b668ccc78ce94c3e9f28d6eea944b7cbcafc501ef9e0c918c5058b20629629ee5961e76303e00ad7e449edb8b70608c6d4e3f66040115fffb4def298e1341e55dce6e7c679f1c879fa8f2c27f84be1f8e9c2ef0866dac07536c2a7f209cc55646ed7e0d3f32c060eca872fd308006092a864886f70d010701301d060960864801650304010204109e8d877d8003a552859dc6f3b9dfc752a08004820400d6e88ba9eaea9d0d04c4682d4e85117472ef43cfb47206ecca7f9e3180258e5c339d50aa39db2f4ce60a37a2e4b6a6e8292a7a6520a23ad58f7d5794b543b5cfa1b4f7a74655be4a6f9ff783a861e621122d3b8e6ecc066652ebb75c0f386e2655cf2d5ca2bd828cafc3f8a3093f7fb3420816ae906d12945678d1912273c1a9dfb89af530eb3d5c22551a65a0f859cb3790a210a868d89a60752f2b869b17c3b8711a5beba0443135c35f77472aa4341bd983055dbc456b3051798e0f86fe8d58614d7d4d1059500408eb077cc24f3b8c62822a448a7368ae349df9bbdfd68801211ec29175ee8a45cf667a951c64434f152509d09ad111127768eedd1849be853a399bc0e94fb6fb2f7997fda8796106b06b8ec428291fa8467f4b91961ffe3a880e8debc2665b56e641d9d1ac14d210564b53c9272775c460c87df452c841ce9ce5b902957ac173e681a9fe9e5ab4956945f73cada3486f34fdfaa353a40ea8e5342f75cf01c965a271856a4102779e4d75732a280c98def8e258d7b0f7a42c748db66b1d15ea56bd98dc1c9978932835085d2708220e16750a9753d282958d66883631aeabccd5587e2a3f9975d59da32e9667d7f1276b00b768cf3ad22f19003418180c933faf313dab088c3bc2d6ed1ea7a7e37d5e1e22b4602c4cdfd13449bec3c8d7b3d0531feb69c42639725c95cc1fd62f36e423063dc86c82ee87de9b22ac66dae71dad38af62a26d3313c727b88135aa62c5034887ea26c0cb47bf86a6cca53791edffab7fc93eab0d0a2d8ac269083522807efa34af77fcaf8484824cd8bad175ce78bef7af25b6915bc0c446ef95844fce92f18edfc5f7ae1a0ba06e9fe356687ecce29405b16fce94e5d7d1d68e0c885f456c23a8108e7960bcd74837d439b4e8f4079df65615117007e04d2459eb3063faf4ae1141abcda6375d046cf9492972957abd2208ddda5de13c61d06c42259b306f0330bcb57f56e7065487d565a3a5fad81e856c51d06f8f91f5450ca15ce0825ce7199c2bdd4a67845c4210262c05245545a5e0eadd446d0a74b970748fbdc94d92255c395b6e68dddb63092b33605f56e66f323f6226245db65c40e442e8d5e566398b78b197c03c0d0e33dcfb6677a6c5348568077d511cac9ba4adb2587d302188f3e821d3993b75ea0e736aa6984843c62c12498585390bf5cd515093591bff2cf8f814908042aa2b65765f101aa12d1d0431337162f201816a12f11e8f64925927d971e8ce55ada5a6860732051bbd65c307132bd431e32474549a8921d0cff2e2e47976a05da5451e3fe07aff3b7db3171bc78b32632db66e128fc8614fa923943b04b917f7386194b91085c55b99d880baee396d1a2d9c90db883c85f643118ea964f770d68968360a6754b5ffddce00b57134a551cb0b8f4dfe6c7ec1501711fdb9a8048204007b8bf701a533b13a77c85f02dec71ceb7e6d9a0b49eae7d21641718304701c6b8875cd00b30c14c0d73af1fa488ff805ebeeae1e5a3596d2ff6cde3ef60e43b3dd4e6a5dfa5f796255c86fca0400a09a1dd06e781adc1e5063ba9dd94bd5115130d5dccb498fb15fc55db2b08273d097ae034e5db5a77f25e66ad33bda7f35a1e072ad957fa29d31aacd6320b71497582ce6db112bf0737e1ecf19dadf5864b0260361177905c4054bc5dd1d833008489b4459d5e74859fc711f898625fc2fe1bd705832190d42a24e9b1be26a2477aa4a7190da4fb6003d37002769a7163099acc93a3d6c057d01b9b4c2a2525e11f9f4c5cc53f9441d3e07e1d982a568047b4bac59ca4b471a4f213702f01c86d3fa63959d1aba4286fa2fb443741c1af2bbd18ec1fc0d1e631104dec71545fe5583c87d76bb0a1c41457da414941f7e9e4d4bc6857cf43283c1c053e1edea4763edc236ba4384e678261ece08abd65dd9ea5345f4e106dee6d5df4cf30166652a67c0322e5d07101169401a66a23a601c7fcbe103f9c6064f70414f0d4480ea667fa2695c5d9ba8a8eeedd998510814b2ae5824368c7a5e47c67e841678e2724b8a268b002cde9276ef15669f84d6915c217fbafb0ce14d0cfff504af4f473905b37213c49060bf762c64e5f5881464a06b348a6ec98c4b7e6ea86b6152b3eeea2c2dec3b607df5feeced2130d7ef6f3f13b0c23763d617b8ec981aac13b578e27784ef2bacfa7962e5ffdfac44a9383e1e80e03635549e7aa27dd144cdb85e83377d7148f9a5352f9a2c8af713bf05132cdcf3203625678bbe4b3de47f23f0669872b952bd5969f777278956dacc5e2a55d3e1769db6c3b2997453e85ad0a522412aeb34cfd60af4db7a567d3a8db67da431d54c030e01eae84ea173813273abea43af5e4b89dba77ba76de160ac11275fdfd445078dbb168cc575aa00f6f303fff773cb2d5741d63721d03d90ed5001d27c2c504e057b295e4bdffa5211530c1279bab138e1d2d45fc871937f9396f329d111f7112ef5acbcd05b3b0196f750d6f427c72ea1fbac1a6c79f129e848eac7e752c2c89aff5a2ac8cbd2eaa8c4958d5a9e9fc47a84e86851e85c0cdc429c4b2defea7b6cb62a542b209051cb26e0b54960895c18352ce4d6ed95a846d701891b871a2e3a8f7cde3095eb7a90c06542b21ca0fde782d699662ec73617b04f4d10695186cf72250ffa70d03a23f9efcfd276ba793fe923c994b8807f4f5ce87303f7787dbef519ca879b7816ee467efa3a05c3035fda16a605924f61dbdc6889338c29c36457a4aa0ada62cb897e1dfd9458671e3283bca92abd9c2fd7d850af2a042988e0c09a9e0293070be59d0617b30302b96461a89ab6bc42668b06fbb036255db9983bbb05671f2f13d7863e26c46edd8a1034b67d608adda75fdfb4970460a3d6fc257a49d9ab20b35a9fbad10952b50b5ad6a8b0acb8272473cf3da9a502c8b6febeaf45d0fe134d0bf65b53aa7319cbee6531deaedbfb4ec23365d204ac130af2422b1e12c7366f90975c76bd7623fd025f4e720b601ea5680b5a9e23cb00000000`;

    var code = Buffer.from(code_hex.replace(/ /g, ""), 'hex').toString('latin1');

    var asn1 = new jCastle.asn1();
    var obj = asn1.parse(code);

    //console.log(jCastle.asn1.rasterize(obj));

    var der = asn1.getDER(obj);
    //console.log('der remaking: ', der === sample);

    assert.equal(der, code, 'DER Remaking Test');

    assert.equal(obj.items[0].items[0].type, jCastle.asn1.tagOID, 'type test');

    assert.equal(obj.items[0].items[0].value, '1.2.840.113549.1.7.3', 'value test');

    const signed_cert_hex = `
    30 82 03 6E 30 82 02 D7 02 02 0E 01 30 0D 06 09 2A 86 48 86 F7 0D 01 01 05 05 00 30 81 9B 31 0B
    30 09 06 03 55 04 06 13 02 4A 50 31 0E 30 0C 06 03 55 04 08 13 05 54 6F 6B 79 6F 31 10 30 0E 06
    03 55 04 07 13 07 43 68 75 6F 2D 6B 75 31 11 30 0F 06 03 55 04 0A 13 08 46 72 61 6E 6B 34 44 44
    31 18 30 16 06 03 55 04 0B 13 0F 57 65 62 43 65 72 74 20 53 75 70 70 6F 72 74 31 18 30 16 06 03
    55 04 03 13 0F 46 72 61 6E 6B 34 44 44 20 57 65 62 20 43 41 31 23 30 21 06 09 2A 86 48 86 F7 0D
    01 09 01 16 14 73 75 70 70 6F 72 74 40 66 72 61 6E 6B 34 64 64 2E 63 6F 6D 30 1E 17 0D 31 32 30
    38 32 32 30 37 32 37 30 32 5A 17 0D 31 37 30 38 32 31 30 37 32 37 30 32 5A 30 4A 31 0B 30 09 06
    03 55 04 06 13 02 4A 50 31 0E 30 0C 06 03 55 04 08 0C 05 54 6F 6B 79 6F 31 11 30 0F 06 03 55 04
    0A 0C 08 46 72 61 6E 6B 34 44 44 31 18 30 16 06 03 55 04 03 0C 0F 77 77 77 2E 65 78 61 6D 70 6C
    65 2E 63 6F 6D 30 82 01 B6 30 82 01 2B 06 07 2A 86 48 CE 38 04 01 30 82 01 1E 02 81 81 00 99 27
    4A D6 82 87 95 CC FE D9 A6 BA DE AC 70 DF 7E 3B 70 8B 51 AC 8E 3D AD FD 9F BB 3D 48 25 C0 03 51
    64 35 5B 6A 62 FD B9 3F 2E A2 CD 78 B4 BB 71 47 37 0C B4 A8 A1 A2 D8 64 9F BC 6E 69 A7 AA BD 52
    06 0E E7 8B 4D 0F 9C 7C 45 55 3C A8 99 FE 0E 1C 3B B8 45 EA BC 1C 41 19 71 E8 52 A6 4A C0 5D 74
    E5 37 59 56 6B 1B 53 87 FF 85 FC 2E A4 44 42 C3 7E F2 BA 1D 34 75 D5 46 01 9E D4 DC C6 25 02 15
    00 9D 40 9C E0 51 15 A6 EC 15 04 24 40 F3 CB A7 56 DA 35 BB 9B 02 81 80 53 F0 72 BD E1 A3 58 2B
    48 B2 B7 57 23 CE 33 16 27 FC 4C 40 F4 97 21 13 4A D2 66 07 0E 7B E1 01 2C 2B 09 8F FC 07 23 A6
    59 CC 88 17 E2 FF 0D 9A 62 CC 8B 96 81 B6 79 DB 17 F7 5A 80 E5 CB F0 13 32 B0 AA D0 FC F2 74 AA
    1E C6 E9 2F 7F AE 62 63 7D D2 DE 8B 5C 23 43 DF 54 2B 1C 76 DB 45 E4 F0 48 85 0B 73 57 86 C2 CC
    D8 34 95 35 04 A1 E5 95 2B 02 DF 94 40 6B FA 29 F1 DB AD 34 E3 74 01 C8 03 81 84 00 02 81 80 3E
    98 50 81 F6 95 16 C5 5A AA 77 B2 15 27 77 B8 70 8A 8F 66 26 2E D6 06 1F 5A 0E F8 BB B9 69 73 94
    87 97 9A 94 65 2B 07 A7 D6 1C 55 EA 42 05 D1 1E 3A 41 EF 2B 00 A0 8B 7C AA BD 46 D1 10 B9 3B B6
    10 8D 68 09 79 F7 9A CC EE B8 44 4B A5 52 36 4E 83 1E A7 DF 33 4F 24 9A 92 80 A7 4F 48 59 7F E9
    DC 97 2C 1A 98 33 BB F0 88 16 C1 FC 92 F3 98 A9 82 10 51 0D 07 65 34 31 A6 ED EE B2 2F 64 21 30
    0D 06 09 2A 86 48 86 F7 0D 01 01 05 05 00 03 81 81 00 07 D1 C2 9A B2 04 98 45 6E 12 DA 72 62 4C
    73 0F D9 F6 5F 5A EF B9 5B A0 59 36 53 B2 1B 68 FB 92 91 C0 B5 57 CB 68 BB 97 0C FF DE 52 12 34
    25 7E FF 72 BA C5 34 C4 68 9C 36 01 45 D3 E5 AC 95 06 A8 65 D7 B4 8C 64 4C 96 DA 70 02 38 EC 63
    D1 1C 18 61 4C 2F 09 A4 02 5E D4 5F 7B 94 89 43 D9 5F 1B 35 B4 54 12 F5 1B 0C 95 02 46 40 FD BD
    71 DB 3B 0D 90 05 5F 78 2F F5 05 CA 84 CF 52 B6 88 AF
    `;

    var signed_cert = Buffer.from(signed_cert_hex.replace(/[ \n\r]/g, ""), 'hex').toString('latin1');

    var asn1 = new jCastle.asn1();
    var obj = asn1.parse(signed_cert);

    //console.log(jCastle.asn1.rasterize(obj));

    var der = asn1.getDER(obj);
    //console.log('der remaking: ', der === signed_cert);

    assert.equal(der, signed_cert, 'DER Remaking Test');

    assert.equal(obj.items[0].items[1].items[0].type, jCastle.asn1.tagOID, 'type test');
    // sha1WithRSAEncryption (PKCS #1)
    assert.equal(obj.items[0].items[1].items[0].value, '1.2.840.113549.1.1.5', 'value test');
});


